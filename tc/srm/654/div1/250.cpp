/* base IO */
#include <iostream>
#include <cstdio>
#include <cstring>
#include <cctype>
#include <fstream>
#include <sstream>
#include <iomanip>

/* data structure */
#include <vector>
#include <string>
#include <set>
#include <unordered_set>
#include <map>
#include <unordered_map>
#include <queue>
#include <stack>
#include <bitset>

/* alrotihm and math */
#include <algorithm>
#include <random>
#include <cmath>

/* run-time */
#include <cstdlib>
#include <ctime>
#include <climits>

/* system dependent */
#include <sys/time.h>

using namespace std;

#define VI vector<int>
#define VD vector<double>
#define PII pair<int, int>
#define PDD pair<double, double>
#define PB push_back
#define MP make_pair
#define len(x) ((x).size())

const int inf = INT_MAX;
const long long inf_ll = 0x7f7f7f7f;
const double eps = 1e-8;
const int maxn = 1005;

/*
 * 0 1 2
 * 3   4
 * 5 6 7
 */
const int bfs_dy[] = {-1, -1, -1, 0, 0, 1, 1, 1};
const int bfs_dx[] = {-1, 0, 1, -1, 1, -1, 0, 1};

/*
 *   3  
 * 2   0
 *   1  
 */
const int dfs_dy[] = {0, 1, 0, -1};
const int dfs_dx[] = {1, 0, -1, 0};

PII dir[] = {make_pair(0,1),make_pair(1,0),make_pair(0,-1),make_pair(-1,0)};
/* TC HEADER END */

class SquareScores {
	public:
        vector <double> p;
        int dp[maxn][maxn];
        int flag[maxn][maxn];
        double calcexpectation(vector <int> _p, string s) {
            cout << s.size() << endl;
            cout << s << endl;
            for(auto i: _p) {
                cout << i << endl;
            }
            p.resize(30);
            fill(p.begin(), p.end(), 0.);
            int n = _p.size();
            for(int i = 0; i < _p.size(); i++) {
                p[i] = log(_p[i] / 100.);
            }
            int l = s.size();
            double ans = 0.;
            memset(dp, 0, sizeof(dp));
            memset(flag, 0, sizeof(flag));
            map <char, int> mark;
            for(int i = 0; i < l; i++) {
                mark.clear();
                char last = -1;
                for(int j = i; j < l; j++) {
                    dp[i][j] = dp[i][j-1];
                    if(s[j] != '?') {
                        mark[s[j]]++;
                        last = s[j];
                    } else {
                        dp[i][j]++;
                    }
                    if(mark.size() == 0) {
                        flag[i][j] = 1; // all ?
                    } else if(mark.size() == 1) {
                        flag[i][j] = last; // one char
                    } else if(mark.size() > 1) {
                        flag[i][j] = -1; // multi char
                    }
                }
            }
            /*for(int i = 0; i < l; i++) {
                for(int j = 0; j < l; j++) {
                    cout << dp[i][j] << ' ';
                } cout << endl;
            }
            cout << endl;
            for(int i = 0; i < l; i++) {
                for(int j = 0; j < l; j++) {
                    cout << flag[i][j] << ' ';
                } cout << endl;
            }*/
            for(int i = 0; i < l; i++) {
                for(int j = i; j < l; j++) {
                    int z = j - i + 1;
                    if(flag[i][j] == 1) {
                        double temp = 0.;
                        for(int i =0; i < n; i++) {
                            temp += exp(z * p[i]);
                        }
                        ans += temp;
                    } else if(flag[i][j] == -1) {
                        ans += 0;
                    } else {
                        if(dp[i][j] != 0) {
                            ans += exp(dp[i][j] * p[flag[i][j]-'a']); 
                        } else {
                            ans += 1;
                        }
                    }
                    // cout << i << ' ' << j << ' ' << ans << endl;
                }
            }
            return ans;
        }
};

int main() {
    SquareScores a;
    cout << fixed;
    cout << setprecision(10) << a.calcexpectation({99, 1}, "ab") << endl;
}
